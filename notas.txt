startar o servidor
php -S localhost:8080


isset siginifica se está setado
isset($sobrenome) se existe essa variavel $sobrenome

Apache recebe a requisição

Manda pro local correto
(no caso estamos mandando pra php1)

Chama o PHP pra interpretar o codigo PHP
(entao dentro da pasta no arquivo index ele vai interpretar só o q tem PHP)

O PHP manda o resultado p o Apache

O Apache junta o que não é interpretavel e manda pro usuario

Opa 
<?php 
tudo o q ta aqui dentro é codigo php
?> 


*******************************
Array Spread

jeito sem spred
<?php
$bolo1 = [
    'acucar', 
    'farinha', 
    'ovo',
    'leite',
    'fermento'
];

$bolo2 = [
    'acucar', 
    'farinha', 
    'ovo',
    'leite',
    'fermento',
    'corante'
];

com Spread
<?php
$bolo1 = [
    'acucar', 
    'farinha', 
    'ovo',
    'leite',
    'fermento'
];

$bolo2 = [
    ...$bolo1,
    'corante'
];
echo $bolo2[2];

outro exemplo
$lista1 = ['adrinao', 'andreia', 'vava'];
$lista2 = ['fefe', 'tutu', 'paula'];
$lista3 = ['...$lista1','...$lista2'];



1exercicio
<?php
$lista = [
    'nome'=>'Beto',
    'idade'=>90,
    'atributos'=> [
        'forca'=>60,
        'agilidade'=>80,
        'destreza'=>50,
    ],
    vida=>1000
    mana=>928
];

echo "NOME: ".$lista['nome']."<br/>";
echo "FORÇA: ".$lista['atributos']['forca']."<br/>";
echo "VIDA: ".$lista['vida']."<br/>";

solução1
<?php
$atributos = [$força = 60,
            $agilidade = 80,
            $destreza = 50,
];
$lista = [$nome = 'Renato',
        $idade = 49,
        ...$atributos,
        $vida = 1000,
        $mana = 928,
];

echo "Nome: ".$lista[0]."<br/>";
echo "Força: ".$lista[2]."<br/>";
echo "Vida: ".$lista[5]."<br/>";


solução2
<?php
$lista = [
'nome'=>'Beto',
'idade'=>90,
'atributos'=> [
'forca'=>60,
'agilidade'=>80,
'destreza'=>50,
],
'vida'=>1000,
'mana'=>928,
];

echo "NOME: ".$lista['nome']."<br/>";
echo "FORÇA: ".$lista['atributos']['forca']."<br/>";
echo "VIDA: ".$lista['vida']."<br/>";




<?php
require('../config.php');

?>



//SOLID: L - Princípio da Substituição de Liskov
//Um dos princípios do SOLID é o princípio da substituição de Liskov. Certo desenvolvedor desenvolveu uma classe A e uma classe B. A classe B ele definiu como uma extensão de A. Mais tarde ele precisou criar uma classe C extendida de B. Todas as classes possuem métodos com mesmo nome. O que o desenvolvedor poderia usar para evitar redefinição de métodos?
//Injeção de Dependência.

// class A{
//     public function getNome(){
//         return "Meu nome e A";
//     }
// }

// function imprimeNome(A $obj){
//     return $obj->getNome();
// }

// $objeto1 = new A();
// echo imprimeNome($objeto1);

//usando principio
// se eu criar uma outra classe e extender A substituindo metodo q esteja em A um exemplo é o getNome() entao uma outra funcao ou uma outra classe q esteja recebendo a minha classe A ela tem q poder receber a classe B tbm 
class A{
    public function getNome(){
        return "Meu nome e A";
    }
}

class B extends A{
    public function getNome(){
        return "Meu nome e B";
    }
}

function imprimeNome(A $obj){
    return $obj->getNome();
}

$objeto1 = new A();
$objeto2 = new B();
echo imprimeNome($objeto1)."<br>";
echo imprimeNome($objeto2);